from rdkit import Chem
from rdkit.Chem import Draw
from .custom_residues import is_pi_bonded, dist
from .data import *
import networkx as nx
from .dijkstras import Branch, ShortestPath
from .smiles import getSimpleSmiles

class emap():
    def __init__(self, filename, structure, custom_residues, chain_list):
        self.filename = filename
        self.structure = structure
        self.smiles_dict = {}
        self.residue_dict = {}
        self.chains = chain_list
        self.custom_residues = custom_residues
        self.residue_names = []
        for residue in custom_residues:
            self.add_residue(residue)

    def store_initial_agraph(self, agraph):
        '''Stores agraph generated by process data 
        '''
        self.init_agraph = agraph

    def store_paths(self, shortest_paths):
        '''Stores pathways
        '''
        self.shortest_paths = shortest_paths

    def store_paths_agraph(self, agraph):
        '''Stores agraph generated by pathways
        '''
        self.paths_agraph = agraph

    def save_residue(self, resname, dest="",size=(200,200)):
        '''Saves image of residue to file
        '''
        mol = Chem.MolFromSmarts(self.smiles_dict.get(resname))
        if dest:
            Draw.MolToFile(mol, dest, kekulize=False, size=size)
        else:
            Draw.MolToFile(mol, resname + ".png", kekulize=False, size=size)

    def save_init_agraph(self,dest=""):
        '''Saves image of agraph generated by process to file
        '''
        if self.init_agraph:
            if dest:
                fn=dest
            else:
                fn = self.filename[:-4] + "_graph.png"
            self.init_agraph.draw(fn, prog='neato')
        else:
            raise Exception("Nothing to draw.")

    def save_paths_agraph(self,dest=""):
        '''Saves image of agraph generated by pathways to file
        '''
        if self.paths_agraph:
            if dest:
                fn=dest
            else:
                fn = self.filename[:-4] + "_paths.png"
            self.paths_agraph.draw(fn, prog='neato')
        else:
            raise Exception("Nothing to draw.")

    def add_residue(self, residue, node_label=None):
        '''
        '''
        if not node_label:
            node_label = residue.resname
        atoms = list(residue.get_atoms())
        arom_atoms = ['O', 'P', 'N', 'C', 'S']
        res_graph = nx.Graph()
        for i in range(len(atoms)):
            for k in range(i, len(atoms)):
                if (not i == k) and is_pi_bonded(atoms[i], atoms[k]):
                    if atoms[i].element in arom_atoms and atoms[k].element in arom_atoms:
                        res_graph.add_edge(i, k)
        if len(res_graph.edges()) > 0:
            smiles_str = getSimpleSmiles(res_graph, atoms)
            molecule = Chem.MolFromSmarts(smiles_str)
            can_smiles_str = Chem.MolToSmarts(molecule, True)
            self.smiles_dict[node_label] = can_smiles_str
        self.residue_dict[node_label] = residue
        self.residue_names.append(node_label)
        #else TODO handle situations where there's only one residue
